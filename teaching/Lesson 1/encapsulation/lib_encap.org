* Library encapsulation
** Why
   - Stable Interfaces
   - Hide the impliment details
   - Users need recompilation only if the changes on the interfaces
   - Keep secret
** How
*** void method
    Using void to replace any type.
    Cons: not easy understanding.

*** private class members
    #+BEGIN_SRC C++
       #include "X.h"
       #include "Y.h"
       #include "Z.h"

       class A
       {
       // the interface
       public:
         X getX();
         Y getY();
         Z getZ();
         ...

       // the impliment
       private:
         X god;
         Y damn;
         Z it;
       };
    #+END_SRC
    Cons: Basic, the headers and private members are exposed, not good encapsulation.
    When the headers change, the recompilation need.

*** using declartions not definition
    #+BEGIN_SRC C++
      // A.h
      class X;
      class Y;
      class Z;

      class A
      {
      public:
        X getX();
        Y getY();
        Z getZ();

      private:
        X* god;
        Y* damn;
         Z* it;
      };
    #+END_SRC
    This method is better than before.

*** pimpl mode
Scott Mayer: this is the real method seprates the interfaces and the implementations.
    #+BEGIN_SRC C++
      // AImpl.h
      class AImpl
      {
      public:
        X getX();
        Y getY();
        Z getZ();
        ...
      private:
        X x;
        Y y;
        Z z;
      };

      // A.h
      class X;
      class Y;
      class Z;
      class AImpl;

      class A
      {
      public:
        // maybe implï¼šX getX() { return pImpl->getX(); }
        X getX()
        Y getY()
        Z getZ();
        ...
      private:
        std::tr1::shared_ptr<AImpl> pImpl;
      };
    #+END_SRC
    Every implimentations are encapsulated in the class AImpl.
    Cons: Another class AImpl need, the effetive.

*** interface class
    #+BEGIN_SRC C++
      // A.h
      class A
      {
      public:
        virtual ~A();
        virtual X getX() = 0;
        virtual Y getY() = 0;
        virtual Z getZ() = 0;
        ...
      };

      class AConcrete: public A
      { ... };
    #+END_SRC
    Cons: VPTR, virtual pointer

** Pimpl mode Demo
   See the catkin_ws folder
