* C++ coding guideline
  Coding style is important. A *clean*, *consistent* style leads to code that is more *readable*, *debuggable*, and *maintainable*. We strive to write *elegant* code that will not only perform its desired function today, but will also live on, to be re-used and improved by other developers for many years to come.

  To this end, we prescribe (and proscribe) a variety of practices. Our goal is to encourage agile but reasoned development of code that can be easily understood by others.

  These are guidelines, not rules. With very few exceptions, this document does not completely ban any particular C++ pattern or feature, but rather describes best practice, to be used in the large majority of cases. When deviating from the guidelines given here, just be sure to consider your options carefully, and to document your reasoning, in the code.

  Above all else, be *consistent*. Follow this guide whenever possible, but if you are editing a package written by someone else, follow the existing stylistic conventions in that package (unless you are retrofitting the whole package to follow this guide, for which you deserve an award).
* Autoformatting of ROS Code
  Use a robot to format your code using "clang-format".
** install clang_format
   #+BEGIN_SRC sh
   sudo apt-get install -y clang-format-3.8
   #+END_SRC
** Symlink
   #+BEGIN_SRC sh
   git clone https://github.com/davetcoleman/roscpp_code_format.git
   ln -s ~/path2/roscpp_code_format/.clang-format ~/catkin_ws/.clang-format
   #+END_SRC
   Now any file inside you catkin workspace will be formatted with the ROS style guidelines described in this config file.
** Command Line Usage
   #+BEGIN_SRC sh
   clang-format-3.8 -i -style=file MY_ROS_NODE.cpp
   find . -name '*.h' -or -name '*.hpp' -or -name '*.cpp' | xagrs clang-format-3.8 -i -style=file $1
   #+END_SRC
** Emacs Editor Configuration
   In your ~/.emacs config file, add the following:
   Format your source code if its in some directory such as the catkin_ws (feel free to change keywords catkin_ws):
   #+BEGIN_SRC emacs-lisp
   (defun run-ros-clang-format ()
   "Runs clang-format on cpp,h files in catkin_ws/ and reverts buffer."
   (interactive)
   (and
   (string-match "/catkin_ws/.*\\.\\(h\\|cpp\\)$" buffer-file-name)
   (save-some-buffers 'no-confirm)
   (shell-command (concat "clang-format-3.8 -style=file -i " buffer-file-name))
   (message (concat "Saved and ran clang-format on " buffer-file-name))
   (revert-buffer t t t)
   ))
   #+END_SRC

   Set a keyboard shortcut to run, such as F12
   #+BEGIN_SRC emacs-lisp
   (global-set-key [f12] 'run-ros-clang-format)
   #+END_SRC

* Naming
  The following shortcuts are used in this section to denote naming schemes:
  - *CamelCased*
   The name starts with a capital letter, and has a capital letter for each new word, with no underscores.
  - *camelCased*
   Like CamelCased, but with a lower-case first letter.
  - *under_scored*
   The name uses only lower-case letters, with words separated by underscores. (yes, I realize that under_scored should be underscored, because it's just one word).
  - *ALL_CAPITALS*
   All capital letters, with words separated by underscores.
* Packages
  ROS packages are *under_scored*.
* Topics/Services
  ROS topics and service names are *under_scored*.
* Files
  All files are *under_scored*.
  Source files have the extension *.cpp*.
  Header files have the extension *.h*.
  Be descriptive, e.g., instead of *laser.cpp*, use *hokuyo_topurg_laser.cpp*.
  If the file primarily implements a class, name the file after the class.
  For example the class =ActionServer= would live in the file =action_server.h=.
** Libraries
   Libraries, being files, are *under_scored*.
   Don't insert an underscore immediately after the *lib* prefix in the library name.
   E.g.,
   #+BEGIN_EXAMPLE
   lib_my_great_thing ## Bad
   libmy_great_thing  ## Good
   #+END_EXAMPLE

* Class/Types
  Class names (and other type names) are *CamelCased*.
  E.g.:
  #+BEGIN_SRC C++
  class ExampleClass;
  #+END_SRC C++
  Exception: if the class name contains a short acronym, the acronym itself should be all capital, e.g.:
  #+BEGIN_SRC C++
  class HokuyoURGLaser;
  #+END_SRC C++
  Name the class after what it is. If you can't think of what it is, perhaps you have not thought though the design well enough.
  Compound names of over three words are a clue that your design may be unnecessarily confusing.
* Function/Methods
  In general, function and class method names are *camelCased*, and arguments are *under_scored*, e.g.:
  #+BEGIN_SRC C++
  int exampleMethod(int example_arg);
  #+END_SRC C++
  Functions and methods usually perform an action, so their name should make clear what they do: checkForErrors() instead of errorCheck(),
  dumpDataToFile() instead of dataFile(). Class are often nouns.
  By making function names verbs and following other nameing convertions programs can be read more naturally.
* Variables
  In general, variable anmes are *under_scored*.
  Be reasonably descriptive and try not to be cryptic. Longer variable names don't take up more space in memory, I promise.
  Integral iterator variables can be very short, such as *i*, *j*, *k*. Be consistent in how you use iterators (e.g., *i* on the outer loop, *j* on the next inner loop).
  STL iterator variables should indicate what they're iterating over, e.g.:
  #+BEGIN_SRC C++
  std::list<int> pid_list;
  std::list<int>::iterator pid_it;
  #+END_SRC

  Alternatively, an STL iterator can indicate the type of element that it can point at, e.g.:
  #+BEGIN_SRC C++
  std::list<int> pid_list;
  std::list<int>::iterator int_it;
  #+END_SRC
** Constants
   Constants, wherever they are used, are *ALL_CAPITALS*.
** Member variables
   Variables that are members of a class (sometimes called fields) are *under_scored*, with a trailing underscore added.
   E.g.:
   #+BEGIN_SRC C++
   int example_int_;
   #+END_SRC
** Global variables
   Global variables should almost never be used (see below for more on this). When they are used, global variables are *under_scored* with a leading *g_* added.
   E.g.,:
   #+BEGIN_SRC C++
   // I tried everything else, but I really need this global variable
   int g_shutdown;
   #+END_SRC
* Namespaces
  Namespace names are *under_scored*.
* License statements
  Every source and header file must contain a license and copyright statement at the beginning of the file.
  In the *ros-pkg* and *wg-ros-pkg* repositories, the *LICENSE* directory contains license templates, commented for inclusion in C/C++ code.
* Formatting
  Your editor should handle most formatting tasks. See EditorHelp for example editor configuration files.
  Indent each block by 2 spaces. Never insert literal tab characters.
  The contents of a namespace are not indented.
  Braces, both open and close, go on their own lines (no "cuddled braces"). E.g.:
  #+BEGIN_SRC C++
  if(a < b)
  {
  // do stuff
  }
  else
  {
  // do other stuff
  }
  #+END_SRC

  Braces can be omitted if the enclosed block is a single-line statement, e.g.:
  #+BEGIN_SRC C++
  if(a < b)
    x = 2*a;
  #+END_SRC

  Always include the braces if the enclosed block is more complex, e.g.:
  #+BEGIN_SRC C++
  if(a < b)
  {
    for(int i=0; i<10; i++)
      PrintItem(i);
  }
  #+END_SRC

  Here is a larger example:
  #+BEGIN_SRC C++
    /*
   * A block comment looks like this...
   */
  #include <math.h>
  class Point
  {
  public:
  Point(double xc, double yc) :
      x_(xc), y_(yc)
    {
      }
  double distance(const Point& other) const;
    int compareX(const Point& other) const;
    double x_;
    double y_;
  };
  double Point::distance(const Point& other) const
  {
    double dx = x_ - other.x_;
    double dy = y_ - other.y_;
    return sqrt(dx * dx + dy * dy);
  }
  int Point::compareX(const Point& other) const
  {
    if (x_ < other.x_)
    {
      return -1;
    }
    else if (x_ > other.x_)
    {
      return 1;
    }
    else
    {
      return 0;
    }
  }
  namespace foo
  {
  int foo(int bar) const
  {
    switch (bar)
    {
      case 0:
        ++bar;
        break;
      case 1:
        --bar;
      default:
      {
        bar += bar;
      break;
      }
    }
  }
  } // end namespace foo
  #+END_SRC
** Line length
   Maximum line length is 120 characters.
** #ifndef guards
   All headers must be protected against multiple inclusion by #ifndef guards, e.g.:
   #+BEGIN_SRC C++
   #ifndef PACKAGE_PATH_FILE_H
   #define PACKAGE_PATH_FILE_H
   ...
   #endif
   #+END_SRC
   This guard should begin immediately after the license statement, before any code, and should end at the end of the file.
* Documentation
  Code must be documented. Undocumented code, however functional it may be, cannot be maintained.

  We use doxygen to auto-document our code. Doxygen parses your code, extracting documentation from specially formatted comment blocks that appear next to functions, variables, classes, etc. Doxygen can also be used to build more narrative, free-form documentation.

  See the rosdoc page for examples of inserting doxygen-style comments into your code.

  All functions, methods, classes, class variables, enumerations, and constants should be documented.
* Console output
  Avoid printf and friends (e.g., cout). Instead, use rosconsole for all your outputting needs. It offers macros with both printf- and stream-style arguments. Just like printf, rosconsole output goes to screen. Unlike printf, rosconsole output is:

  + color-coded
  + controlled by verbosity level and configuration file
  + published on */rosout*, and thus viewable by anyone on the network (only when working with roscpp)
  + optionally logged to disk

* Macros
  Avoid preprocessor macros whenever possible. Unlike inline functions and const variables, macros are neither typed nor scoped.


* Preprocessor directives (#if vs. #ifdef)
  For conditional compilation (except for the #ifndef guard explained above), always use #if, not #ifdef.

  Someone might write code like:
  #+BEGIN_SRC C++
  #ifdef DEBUG
    temporary_debugger_break();
  #endif
  #+END_SRC

  Someone else might compile the code with turned-off debug info like:
  #+BEGIN_SRC sh
  cc -c lurker.cpp -DDEBUG=0
  #+END_SRC

  Always use #if, if you have to use the preprocessor. This works fine, and does the right thing, even if DEBUG is not defined at all.
  #+BEGIN_SRC C++
  #if DEBUG
    temporary_debugger_break();
  #endif
  #+END_SRC
* Output arguments
  Output arguments to methods / functions (i.e., variables that the function can modify) are passed by pointer, not by reference. E.g.:
  #+BEGIN_SRC C++
  int exampleMethod(FooThing input, BarThing* output);
  #+END_SRC
  By comparison, when passing output arguments by reference, the caller (or subsequent reader of the code) can't tell whether the argument can be modified without reading the prototype of the method.

* Namespaces
  Use of namespaces to scope your code is encouraged. Pick a descriptive name, based on the name of the package.

  Never use a using-directive in header files. Doing so pollutes the namespace of all code that includes the header.

  It is acceptable to use using-directives in a source file. But it is preferred to use using-declarations, which pull in only the names you intend to use.

  E.g., instead of this:
  #+BEGIN_SRC C++
  using namespace std; // Bad, because it imports all names from std::
  #+END_SRC

  Do this:
  #+BEGIN_SRC C++
  using std::list;  // I want to refer to std::list as list
  using std::vector;  // I want to refer to std::vector as vector
  #+END_SRC

* Inheritance
  Inheritance is the appropriate way to define and implement a common interface. The base class defines the interface, and the subclasses implement it.

  Inheritance can also be used to provide common code from a base class to subclasses. This use of inheritance is discouraged. In most cases, the "subclass" could instead contain an instance of the "base class" and achieve the same result with less potential for confusion.

  When overriding a virtual method in a subclass, always declare it to be *virtual*, so that the reader knows what's going on.

* Multiple inheritance
  Multiple inheritance is strongly discouraged, as it can cause intolerable confusion.

* Exceptions
  Exceptions are the preferred error-reporting mechanism, as opposed to returning integer error codes.

  Always document what exceptions can be thrown by your package, on each function / method.

  Don't throw exceptions from destructors.

  Don't throw exceptions from callbacks that you don't invoke directly.

  If you choose in your package to use error codes instead of exceptions, use only error codes. Be *consistent*.
  When your code can be interrupted by exceptions, you must ensure that resources you hold will be deallocated when stack variables go out of scope. In particular, mutexes must be released, and heap-allocated memory must be freed. Accomplish this safety by using the following mutex guards and smart pointers:

* Enumerations
  Namespaceify your enums, e.g.:
  #+BEGIN_SRC C++
  namespace Choices
  {
  enum Choice
  {
  Choice1,
  Choice2,
  Choice3
  };
  }
  typedef Choices::Choice Choice;
  #+END_SRC
  This prevents enums from polluting the namespace they're inside. Individual items within the enum are referenced by: Choices::Choice1, but the typedef still allows declaration of the Choice enum without the namespace.

* Globals
  Globals, both variables and functions, are discouraged. They pollute the namespace and make code less reusable.

  Global variables, in particular, are strongly discouraged. They prevent multiple instantiations of a piece of code and make multi-threaded programming a nightmare.

  Most variables and functions should be declared inside classes. The remainder should be declared inside namespaces.

  Exception: a file may contain a *main()* function and a handful of small helper functions that are global. But keep in mind that one day those helper function may become useful to someone else.

* Static class variables
  Static class variables are discouraged. They prevent multiple instantiations of a piece of code and make multi-threaded programming a nightmare.

* Calling exit()
  Only call *exit()* at a well-defined exit point for the application.

  Never call *exit()* in a library.

* Assertions
  Use assertions to check preconditions, data structure integrity, and the return value from a memory allocator. Assertions are better than writing conditional statements that will rarely, if ever, be exercised.

  Don't call *assert()* directly. Instead use one of these functions, declared in ros/assert.h (part of the rosconsole package):
  #+BEGIN_SRC C++
  /** ROS_ASSERT asserts that the provided expression evaluates to
  * true.  If it is false, program execution will abort, with an informative
  * statement about which assertion failed, in what file.  Use ROS_ASSERT
  * instead of assert() itself.
  */
  #define ROS_ASSERT(expr) ...

  /** ROS_BREAK aborts program execution, with an informative
  * statement about which assertion failed, in what file. Use ROS_BREAK
  * instead of calling assert(0) or ROS_ASSERT(0).
  */
  #define ROS_BREAK() ...
  #+END_SRC
  Do not do work inside an assertion; only check logical expressions. Depending on compilation settings, the assertion may not be executed.

* Testing
  See [[wiki.ros.org/gtest][gtest]].
  [[https://www.ibm.com/developerworks/aix/library/au-googletestingframework.html][A quick introduction to the Google C++ Testing Framework]]
  [[wiki.ros.org/UnitTesting][UnitTesting]]
  [[wiki.ros.org/rostest][rostest]]
  We use two level of testing:
** Libray
   At the library level, we use standard unit-test frameworks. In C++, we use gtest. In python, we use unittest.
** Message
   At the message level, we use rostest to set up a system of ROS nodes, run a test node, then tear down the system.

* Portability
  We're currently support Linux and OS X, with plans to eventually support other OS's, including possibly Windows. To that end, it's important to keep the C++ code portable. Here are a few things to watch for:

  - Don't use *uint* as a type. Instead use *unsigned int*.
  - Call *isnan()* from within the *std* namespace, i.e.: *std::isnan()*
* Deprecation
  To deprecate an entire header file within a package, you may include an appropriate warning:
  #+BEGIN_SRC C++
  #warning mypkg/my_header.h has been deprecated
  #+END_SRC

  To deprecate a function, add the deprecated attribute:
  #+BEGIN_SRC C++
  ROS_DEPRECATED int myFunc();
  #+END_SRC

  To deprecate a class, deprecate its constructor and any static functions:
  #+BEGIN_SRC C++
  class MyClass
  {
  public:
  ROS_DEPRECATED MyClass();

  ROS_DEPRECATED static int myStaticFunc();
  };
  #+END_SRC

  With doxygen using @deprecated; in C/C++ use __attribute__((deprecated))

* Standardization
  Code should use ROS servcices, follow guidelines for their use
  use rosout for printing messages
  ruse the ROS Clock for time-based routines

* EditorHelp
  [[wiki.ros.org/EditorHelp][editorhelp]]
** Vim
   #+BEGIN_SRC emacs-lisp
   set shiftwidth=2 " Two space indents
   set tabstop=2    " Tab key indents two spaces at a time
   set expandtab    " Use spaces when the <Tab> key is pressed
   set cindent      " Turn on automatic C-code indentation
   " Actual formatting rules go here
   " Once I figure out what they should be ...
   #+END_SRC

** Vim (Alternate approach)
   #+BEGIN_SRC sh
   sudo aptitude install vim-scripts
   #+END_SRC

   Edit your .vimrc file
   #+BEGIN_SRC sh
   filetype plugin indent on
   #+END_SRC

   Download the cpp indent style.
   #+BEGIN_SRC sh
   cd ~/.vim/indent
   curl http://www.vim.org/scripts/download_script.php?src_id=13033 > cpp.vim

   gg=G: entire buffer can be re-indented.
   =%:   a section of code you have pasted by moving to the opening {
   ==：  reindented current line
   <%:  blocks of code to unindent by moving to the opening or closing brace
   >%:  blocks of code to indent by moving to the opening or closing brace
   #+END_SRC

** Emacs
   add the following to your ${HOME}/.emacs file:
   #+BEGIN_SRC emacs-lisp
   (defun ROS-c-mode-hook()
   (setq c-basic-offset 2)
   (setq indent-tabs-mode nil)
   (c-set-offset 'substatement-open 0)
   (c-set-offset 'innamespace 0)
   (c-set-offset 'case-label '+)
   (c-set-offset 'statement-case-open 0))

   (add-hook 'c-mode-common-hook 'ROS-c-mode-hook)

   ;;; In order to get namespace indentation correct, .h files must be opened in C++ mode
   (add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))
   #+END_SRC

* Standard Units of Measure and Coordinate Conventions
  [[www.ros.org/reps/rep-0103.html][REP-103]]
** Coordinate Frame Conventions
   All system are right handed.
*** Axis Orientation
**** In relation to a body the standard is:
     + x forward
     + y left
     + z up
**** For short-range Cartesian representations of geographic locations,
     use the east north up (ENU)　convention:
     + X east
     + Y north
     + Z up
**** Suffix Frames
     In the case of cameras, with "_optical" suffix. using:
     + z forward
     + x right
     + y down
     For outdoor system where it is desireable to work under the north east down(NED) conversion:
     + X north
     + Y east
     + Z down




* Reference
** [[wiki.ros.org/CppStyleGuide][ROS C++ Style Guide]]
** [[wiki.ros.org/DevelopersGuide][ROS Developer's Guide]]
** [[https://google.github.io/styleguide/cppguide.html][google c++ style guide]]
