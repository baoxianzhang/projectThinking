* Coding suggestion
** Be concise
   Remove useless brank spaces, lines, comments, header files.
   Try to reconstruct the code to be more efficient, fast and easy-understanding.
   Put the common and the unchange part outside.
   Use the suitable space to make the code more readable.
   Try to align the "=" when several assignments.
   #+BEGIN_SRC C++
     // Bad
     for(int i=0;i<10;i++)
     {
       transform(0,0)=cosf(theta);
       transform(0,1)=-sinf(theta);
     }

     // Good
     for(int i = 0; i < 10; ++i)
     {
       transform(0,0) =  cosf(theta);
       transform(0,1) = -sinf(theta);
     }
   #+END_SRC
** Pi
   Used M_PI.
   Don't using "#define" to define the conversion between rad and degree.
   In pcl, there is DEG2RAD and RAD2DEG
** Headers
   Be structure, from system, publish libraries to self-defined header files.
   Seperate with blank line.
   Remove useless header files.

   Every header(source) files should include the minimun header files. For the following reasons:
   - Compile faster
   - Message encrption

   Every header file should use the #ifndef to guide.

   Use the company header, not your self header.
   Don't:
   #+BEGIN_SRC C++
     // Created by xxx, 2017.01.01
   #+END_SRC

** Namespace
   Group the code using namespace.
   #+BEGIN_SRC C++
     namespace my_namespace
     {

     }
   #+END_SRC

** Brackets
   Use the style in the funtion definitions.
   #+BEGIN_QUOTE
   void someFunction(void)
   {
   }
   #+END_QUOTE

** #define
   Avoid to use macro, try to use the const.
** Use TODO FIXME NOTE to remind you the code status
   #+BEGIN_SRC C++
     // TODO Consider different yaw
     // FIXME To consider the singular problem
     // NOTE Don't set the flag out side the function, all done here.
   #+END_SRC

** Every header and source file should contain the following license declartion
   #+BEGIN_SRC C++
/*
 * Software License Agreement (BSD License)
 *
 *  Point Cloud Library (PCL) - www.pointclouds.org
 *  Copyright (c) 2010-2011, Willow Garage, Inc.
 *
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the copyright holder(s) nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id$
 *
 */
   #+END_SRC

** Comment and documentation
   Use doxygen style to comment your code in *English*.
   All the documentation should be placed with the code repository.

   #+BEGIN_SRC C++
     /** @brief Fibonacci calculation

         Here is the longer description.
         @code
         Fibonacci fib;
         unsigned int fib_value = fib.calulateFibonacci(100);
         ...
         @endcode
      */
     Class Fibonacci
     {
     public:
       //! the default constructor
       Fibonacci();
       /** @brief Caculate the fibonacci value
           @param[in] n the nth elemnt
           @return the fibonacci of n
       */
       unsigned int calculateFibonacci(unsigned int n);
       private:
         int var; //!< Brief description after the member
     };
   #+END_SRC

** Coding
   All team memebers use the same version of gcc and g++, not to bore by the compiler.

   #+BEGIN_SRC C++
  // Bad
  using namespace std;
  using namespace cv;
  using namespace pcl;

  // Good
  std::cout
  std::endl
  std::string
  std::size_t
  std::vector
  std::map
  std::pair
  std::list

  cv::Point2f

   #+END_SRC

   #+BEGIN_SRC C++
  // Bad
  int a = 10  ;
  int bc= 11;


  int cde =21;
  std::cout<<a<<bc<<cde<<std::endl ;
  void funtion(int variable1 ,int variable2,int variable3);

  // Good
  int   a   = 10;
  int   bc  = 11;
  float cde = 21;
  std::cout << a << bc << cde <<std::endl;
  void funtion(int variable1,int variable2, int variable3);
   #+END_SRC


   #+BEGIN_SRC C++
     // Bad
     x = 0; y = 0; z = 0;
     roll = 0; pitch = 0; yall = 0;

     // Good
     x = 0;
     y = 0;
     z = 0;

     roll = 0;
     pitch = 0;
     yall = 0;
   #+END_SRC


** Typedef
   Use typedef to short your type and when define your struct.
   #+BEGIN_SRC C++
  typedef struct abc
  {

  }abc;
   #+END_SRC

** Nameing
   Take time to a good name for a variable and function, be self-description, self-explanatory.
   #+BEGIN_SRC C++
     // Bad
     // float val1;
     // float val2;
   #+END_SRC

** Exception handling
   Try to consider some situations when the code fails to run.
   Try to output some useful message to remind the code status, don't message the core methods.

   #+BEGIN_SRC C++
     // Bad
     if(pointcloud.empty())
     {
       return;
     }

     // Good
     if(pointcloud.empty())
     {
       std::err << "The input cloud is empty ..." << std::endl;
       return;
     }

   #+END_SRC

** Launch file
   Define custom variables in the launch files. Don't use the *absolute path* in the launch and the code.
** Rviz file
   Define a default rviz, don't let your parter to set the parameters again and again.
** Code parameter
   When the parameter number is large to be tune, use the yaml to set the parameters.
** Clean
   To be clean, remove the useless or error comment, code, in .h, .cpp, CMakeLists.txt, package.xml and so on.
** C++ or C
   When you code using C++, try to find the C++ interfaces, like opencv KalmanFilter.
** Sequence
   Function called shoud be left to the after.
** Small code
   Don't write the big code, write the small code.
** Class special member function
   - copy constructor
   - "=" assignment function
   - deconstructor
   You must write the copy constructor and "=" assignment function and deconstructor.
   When you use like push_back function, it will implicitly be called, it will be dangerous.
   When you have some pointers, *new* called, your should release the resource in the deconstructor.
** Unit
   Use SI units and follow ROS REP-103, e.g. use radian instead of degree, m/s instead of km/h, m instead of miles.
   And use the square brackets.
   #+BEGIN_SRC C++
  int velocity; // the velocity of car [m/s]
   #+END_SRC

** std::vector clear and swap
   Use the following code to shrink your memory usage. Please refer to the [[http://blog.jobbole.com/37700/][page]].
   #+BEGIN_SRC C++
     std::vector<type> v;
     std::vector<type>().swap(v);

     // for string
     std::string(s).swap(s);
     // may add the juagement
     // if(!v.empty())
   #+END_SRC
   v.clear() would simply to do what is says: destroy all the element of v (in linear time), but the capacity remains the same.
   vector<type>().swap(v); does the same in a more obfuscated way: swap the buffers of the temporary vector and the old vector (constant time), destruct the temporary vector (linear time)
   Using swap may add some minor overhead caused by the construction and destruction of the temporary vector.

** Use the SPACE not TAB
** Don't assignment in the class declartion
   Only in the situation of the static memebers.


** Encapsulation for lib
   When coding for lib in the company, all the implimentation should be encapsulated.
   #+BEGIN_SRC C++
  // demo_impl.h
  class DemoImpl
  {
  public:
    DemoImpl();
    ~DemoImpl();
    void doSomething(void);
  private:
  };

  // demo_impl.cpp
  DemoImpl::DemoImpl()
  {
  }

  DemoImpl::doSomething()
  {
    std::cout << "doSomething!" << std::endl;
  }

  DemoImpl::~DemoImpl()
  {
  }


  // demo.h
  class DemoImpl;
  class Demo
  {
  Public:
    Demo();
    ~Demo();
    void doSomething(void);
  Private:
    DemoImpl* demo_impl_;
  };

  // demo.cpp
  #include "demo.h"
  #include "demo_impl.h"
  Demo::Demo()
  {
    demo_impl_ = new DemoImpl;
  }

  Demo::doSomething(void)
  {
    demo_impl_->doSomething();
  }

  Demo::~Demo()
  {
    if(demo_impl_)
    {
      delete demo_impl_;
    }
  }

   #+END_SRC
   Don't use the only class constructor function systle
   The name of topics and parameters is fixed, it is not flexible.

** Portability of code
   When use the global definitions, try to use the pointers.
   Because, in windows,  if not used the pointer, it will not be initialization.

   #+BEGIN_SRC C++
  #include <demo/demo.h>

  demo_namespace::Demo *g_demo_obj; // for portability in windows, define the pointer

  int main (int argc, char** argv)
  {
    g_demo_obj = new demo_namespace::Demo;
    for (std::size_t i = 0; i < 20; ++i)
    {
      g_demo_obj->doSomething();
    }
    return 0;
  }

   #+END_SRC


** Static or dynamic library
   When output lib, prefer to a static library to encapsulate the core information.

   When dynamic libraries, please add a version number using CMake rules.
** ROS msg and srv
   The first letter of msg and srv file name should be capitial.
   The variables of the types should be *under_scored.*

** Small functions
   Code small functions. To be more flexible, more easy understanding.
   Statements in the function should be almost the same level.
** Public or private
   Please take time to think about the authorith of class functions and variables
** Sperate packages, node and lib
   Every package should contain only a target. Seperate node(excutable) and lib.
** Force your editor coding style conherent with the coding guide.
** Don't use the only class constructor function systle
   The name of topics and parameters is fixed, so it is not flexible.
** No global variables in the lib
** How to get parameters better
   #+BEGIN_SRC C++
     // Not good
     private_nh.getParam("param_launch_name", param_value);

     // Good
     value = private_nh.param("param_launch_name", DEFAULT_VALUE);
   #+END_SRC

** for loop

   #+BEGIN_SRC C++
     // Bad C style
     int count;
     for(count=0; count <7; count++)
     {
     }

     //Good C=++ style
     for(int count = 0; count < 7; ++count)
     {
     }
   #+END_SRC

** Be care of abs which return an unsigned int, when need float use absf
** publish using the pcl pointcloud type not sensor_msgs type
** Use dynamic parameters (dynamic_reconfigure) for parameter which are likely to change during run time.
** Node Handles
   Default (public) node handle: nh_ = ros::NodeHandle();
   Private node handle: nh_private_ = ros::NodeHandle(“~”);
   Namespaced node handle: nh_aslam_ = ros::NodeHandle(“aslam”);
   Global node handle: nh_global_ = ros::NodeHandle(“/“); (You probably shouldn’t use this ever.)

   Generally you will only use the first 2 -- you could also use the namespaced node handle for separating out publishers for nodes that have many.

   To explain what these do and how they should be used, let’s assume your ROS node is named ros_node, in namespace blah, and you are trying to look up the name topic. Here is what they will resolve to using all 4 node handles:

   /blah/topic
   /blah/ros_node/topic
   /blah/aslam/topic
   /topic
   If, instead, your try to resolve /topic, this will skip the namespace of the node and resolve to /topic.

*** When to Use Which Node Handle

    These are just general guidelines, but when possible, prefer to use the following in each case:

    Subscribers - usually public node handles.
    Publishers - usually private node handles for most output/visualization, occasionally necessary to use public for globally-used data (i.e., /odom topic).
    Parameters - almost always private node handle.
    Never use global names. This is because they do not resolve properly when you push nodes into namespaces, and does not allow you to run more than one of your node at a time properly. Or use multiple robots on the same master. Define published topics and parameters relative to the nodes namespace:

    Good: odometry, grid_map, cam0/camera_info
    Bad: /odometry, /grid_map, /helicopter/cam0/camera_info
** Parameter Organisation
   If your node has only one or two parameters, you can set them in a launch file with the <param> tag:

   #+BEGIN_SRC xml
   <launch>
   <node pkg="my_package" type="my_node" name="my_name" output="screen">
   <param name="my_parameter" value="10" />
   </node>
   </launch>
   #+END_SRC

   In general (preferred), organize the parameters in YAML-files and load them via the rosparam-tag:

   #+BEGIN_SRC xml
   <launch>
   <node pkg="my_package" type="my_node" name="my_name" output="screen">
   <rosparam command="load" file="$(find my_package)/config/robots/starleth.yaml" />
   <rosparam command="load" file="$(find my_package)/config/sensors/default.yaml" />
   </node>
   </launch>
   #+END_SRC
   Do not use command line parameters but the ROS parameter server. For parameters that are likely to change at runtime, use dynamic_reconfigure.
** Using Third-Party Libraries
   Encourages standalone libraries with no ROS dependencies. Don’t put ROS dependencies in the core of your algorithm!
** Dependencies
   Keep your dependencies clean:

   Only depend on what you need,
   Specify all dependencies,
   Do not use implicit dependencies.
** ROS Bag Files
   Play a bag using recorded time (important when stamped data and TF was recorded):

   #+BEGIN_SRC sh
   rosbag play --clock foo.bag
   #+END_SRC

   Note: The /use_sim_time parameter must be set to true before the node is initialized.
   #+BEGIN_SRC sh
   rosparam set use_sim_time true
   #+END_SRC

** Time
   Use ros::Time, ros::Duration, and ros::Rate instead of  system time.

** Split packages
   https://answers.ros.org/question/11835/when-should-i-split-my-code-into-multiple-packages-and-whats-a-good-way-to-split-it/
   Your ROS packages should belong to one or more repositories. Each repository contains one or more packages, the build dependency units.

   When creating a new package, choose the name carefully:

   Package names are global to the entire ROS ecosystem.
   They are messy to change later.
   Try to pick names that will make sense to others who may wish to use your code.
   Package names should start with a letter, and contain only letters, numbers and '_' characters. Lower case is preferred. Feel free to browse the current list for inspiriation.
   Each package can be built separately, so pay attention to dependencies. The package dependency graph must be acyclic, i.e. no package may depend on another that directly or indirectly depends on it.

   The overhead of a ROS package is not large. Define separate packages wherever they make sense.
   Avoid combining nodes that pull in mutually unneeded dependencies.
   To eliminate unnecessary build overhead, avoid combining nodes that are often used separately.
   If programs with similar dependencies are generally used together, consider combining them into a single package.
   If some nodes have common dependencies on shared code that you do not wish to export publicly, they can be combined internally within a single package.
   If the shared code should be exported, consider making it a separate package that the others depend on. (This is reasonable, but not required. A single package can export libraries and headers as well as nodes.)
   Consider combining message definitions in one or more separate packages. That usually simplifies the dependencies among packages, with nodes depending on the messages, and not so much on each other.
** When Topics Should be Remapped
Topic remapping is not just good for avoiding topic name collisions, but also for giving a node a "ROS API". This means a set of topics which are named in the context of the node.

For example, if you must connect the topic "out" of node A (the publisher) to the topic "in" of node B (the subscriber). The communication model requires that both A and B communicates via a single topic. A topic is fully defined by its name, so as long as the resolved topic name is the same and they are connected to the same ROS Master, the nodes will be able to communicate with each other.

Another point of view is the component writer point of view: one should not try to build complex topic names inside a node so that it matches the topic names of some other nodes. Very simple names (which are likely to create a name collision) are better as they will be renamed anyway! This is something many understand only long after using ROS. This pattern makes the whole "ROS API" of a node much easier to understand.
* Reference
** https://github.com/ethz-asl/ros_best_practices/wiki
** http://wiki.ros.org/BestPractices
