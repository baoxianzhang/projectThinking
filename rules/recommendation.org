* Project construction
** [[http://wiki.ros.org/wstool][wstool]] and [[http://wiki.ros.org/wstool][rosinstall file]]
*** Pro
    multi-repository enable
    separate the repository to separate the commit msg

*** Install
    #+BEGIN_SRC sh
      # install rosws/rosinstall
      sudo apt-get install python-wstool
      sudo apt-get install python-rosinstall
      # or
      sudo pip install -U wstool
      sudo pip install -U rosinstall
    #+END_SRC

** Project structure
   #+BEGIN_SRC example
   -- project repository
   -- src
   -- .rosinstall                          // option
   -- folder1 (1st package repository)
   -- folder2 (2nd package repository)
   -- ..
   -- folderN (n-th package repository)
   #+END_SRC

   #+BEGIN_SRC example
  demo
  ├── cfg
  │   └── cfg.yaml
  ├── CMakeLists.txt
  ├── data
  ├── doc
  │   └── theory.md
  ├── include                         // exported header files
  │   └── demo
  │       └── demo.h
  ├── launch
  │   └── demo.launch
  ├── model
  ├── msg
  │   └── DemoMsg.msg
  ├── package.xml
  ├── README.md
  ├── rviz
  │   └── demo.rviz
  ├── script
  │   └── dependence_install.sh
  ├── src                            // source code(cpp and internal header files)
  │   ├── demo.cpp
  │   ├── demo_impl.cpp
  │   ├── demo_impl.h
  │   └── main.cpp
  ├── srv
  │   └── DemoSrv.srv
  └── utest
      └── demo_test.cpp
   #+END_SRC



* Build tool

  Use [[http://catkin-tools.readthedocs.io/en/latest/][*catkin build*]], not use catkin_make.
**  Parallel Isolated Catkin Workflow and catkin build

   The limitations of catkin_make_isolated and the need for additional high-level build tools lead to the development of a parallel version of catkin make isolated, or pcmi, as part of Project Tango. pcmi later became the build verb of the catkin command included in this project.

   As such, the principle behavior of the build verb is to build each package in isolation and in topological order while parallelizing the building of packages which do not depend on each other.

   Other functional improvements over catkin_make and catkin_make_isolated include the following:

   The use of sub-command “verbs” for better organization of build options and build-related functions
   Robustly adapting a build when packages are added to or removed from the source space
   Context-aware building of a given package based on the working directory
   The ability to completely clean a single package’s products from a workspace
   Utilization of persistent build metadata which catches common errors
   Support for different build “profiles” in a single workspace
   Explicit control of workspace chaining
   Additional error-checking for common environment configuration errors
   Numerous other command-line user-interface improvements
   Next  Previous

** Current support
   The current release of catkin_tools supports building two types of packages:
   - Catkin – CMake packages that use the Catkin CMake macros
   - CMake – “Plain” CMake packages

** Installing catkin_tools
*** Installing on Ubuntu with apt-get
    First you must have the ROS repositories which contain the .deb for catkin_tools:
    #+BEGIN_SRC sh
      sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-latest.list'
      wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
      sudo apt-get update
      sudo apt-get install python-catkin-tools
    #+END_SRC
*** Installing on other platforms with pip
    #+BEGIN_SRC sh
      sudo pip install -U catkin_tools
    #+END_SRC
*** Installing from source
    #+BEGIN_SRC sh
      git clone https://github.com/catkin/catkin_tools.git
      cd catkin_tools
      pip install -r requirements.txt --upgrade
      python setup.py install --record install_manifest.txt
    #+END_SRC

** Usage
   #+BEGIN_SRC sh
   catkin -h
   catkin build -h
   catkin clean -h

   catkin config
   catkin create
   catkin env
   catkin init
   catkin list
   catkin locate
   catkin profile
   #+END_SRC
* Version Control System (Git)
** Install git
   Install newest version from [[https://www.kernel.org/pub/software/scm/git/][source]] (recommended)
   sudo apt-get install git (not good)

** Basic commands
*** git config
    git config --global user.name "baoxianzhang"
    git config --global user.email baoxianzhit@gmail.com
    git config --global core.editor vim
    git config --global merge.tool vimdiff
*** git status
*** git add .
*** git commit
    git commit (recommended)
    git commit -m "xxx" (not good)
*** git pull
    git pull --rebase
*** git push

** commit rules
*** one thing one commit
*** thoughtbot rule
    [[https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message][5-useful-tips-for-a-better-commit-message]]
    #+BEGIN_QUOTE
    50-character subject line

    72-character wrapped longer description. This should answer:

    * Why was this change necessary?
    * How does it address the problem?
    * Are there any side effects?

    Include a link to the ticket, if any.
    #+END_QUOTE

*** push frequently
*** Fixed(Bug), should be detail
*** Example
    #+BEGIN_QUOTE
    fix($compile): couple of unit tests for IE9

    Older IEs serialize html uppercased, but IE9 does not...
    Would be better to expect case insensitive, unfortunately jasmine does
    not allow to user regexps for throw expectations.

    Closes #392 or links
    #+END_QUOTE

** Some files should not be added in the VCS
   Try to write the .gitignore file. These files should not be added in the VCS, bin, obj, dll, ~xxx, ...
   Like g2o-master.zip g2o-tutorial-master.zip, just extract the zip and uploading the code, don't include the original zip.
**
